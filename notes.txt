custom banner:
https://devops.datenkollektiv.de/banner.txt/index.html

application.yml
Por cada microservicio, tiene que haber una base de datos diferente,
ahora estamos usando la misma base con diferentes schemas


- COMUNICACION ENTRE MICROSERVICIOS:
Rest template:
Services Discovery: Is the process of automatically detecting devices and services on a network, ej Eureka Server (es de spring)
muchos de estos atributos nos los da Spring Cloud.
Cuando hay muchas instancias de un mismo servicio por ej en diferentes ports, se usa un LoadBalancer que va repartiendo las peticiones a las diferentes instancias.
En este caso configuramos la clase RestTemplate con la anotattion @LoadBalanced y listo!


Openfeign: reduce la complejidad cuando usamos rest http clients.
basicamente cuando hay cosas que queremos compartir con varios microservicios, generamos un cliente Feign y podemos usarlo en todos los servicios.
es para evitar codigo duplicado, podemos compartir info entre los microservicios. en Feign se hace una interface q expone los metodos del cliente q queremos.


Spring Cloud Sleuth: spring boot auto-configuration for distributed tracing
Agrega un camino entre las comunicaciones de los microservicios. ej:
INFO [fraud,38e88ed3afa8f03a(trace id),40a43cdc1dcdd05a (span id)]

Zipkin: distributed tracing system. si tenemos el trace id in a log file, podemos ir directamente a el.
Lo instalamos como una docker image en el docker-compose, es un zipkin server para ver el trace de las comunicaciones entre los servicios.

Load balancer (siempre usar en de Google Cloud o AWS)
agarra un request y lo reparte segun las instancias de los servicios que tenemos disponibles, hay external (el q recibe desde los clientes)
e internal, el q recibe del external.
Usa casi siempre el algoritmo Round Robbin (segun la cantidad de instancias va en orden y circular) aunque hay otros algoritmos para manejar
Tambien realiza health checks (hace un check si el servicio esta ok y le manda el request).

Spring Cloud Gateway (seria un loadbalancer local pero no se usa nunca)

---------------

Message queues: Rabbit MQ , KAFKA (son brokers), Amazon SQS
AMQP 0-9-1 (Advanced message queuing protocol.
Brokers receive messages from publishers (applications) and route them to consumers (applications that process them)
rabbitMQ es async por default no importa si pasa algo el codigo sigue igual.